domain: "Camelot";
goal: location(Medicine) = Peter & location(Peter) = Home;

// Types
type location;
type place extends location;
type container extends location;
type character extends location, agent;
type item;
type coin extends item;
type merchandise extends item;
type weapon extends item, merchandise;

// Entities
character : Peter;
character : Merchant;
character : Guard;
character : Bandit;
place :	Home;
place :	Town;
place :	Market;
place :	Camp;
coin : PeterCoin;
coin : BanditCoin;
merchandise : Medicine;
weapon : MerchantSword;
weapon : GuardSword;
weapon : BanditSword;
container : Chest;

// Properties
boolean	:	path(place, place);
place :		location(character);
place :		location(container);
location :	location(item);
boolean :	alive(character) = True;
boolean :	criminal(character);
boolean :   knowsCriminal(character, character);
boolean :	attacked(character);
weapon :	wielding(character);
character : is(character);

// Intentions
intends(Peter, alive(Peter));
intends(Peter, location(Medicine) = Peter);
intends(Peter, location(Peter) = Home);
intends(Merchant, location(Merchant) = Market);
intends(Merchant, alive(Merchant));
intends(Merchant, location(PeterCoin) = Merchant);
intends(Merchant, location(BanditCoin) = Merchant);
intends(Guard, alive(Guard));
intends(Guard, !alive(Peter));
intends(Guard, !alive(Merchant));
intends(Guard, !alive(Bandit));
intends(Bandit, alive(Bandit));
intends(Bandit, location(PeterCoin) = Chest);
intends(Bandit, location(BanditCoin) = Chest);
intends(Bandit, location(Medicine) = Chest);

// State
location(Peter) = Home;
location(Merchant) = Market;
location(Guard) = Market;
location(Bandit) = Camp;
location(Chest) = Camp;
location(PeterCoin) = Peter;
location(BanditCoin) = Chest;
location(Medicine) = Merchant;
location(MerchantSword) = Merchant;
location(GuardSword) = Guard;
location(BanditSword) = Bandit;
criminal(Bandit);
path(Home, Town);
path(Town, Market);
path(Town, Camp);
path(Camp, Town);
path(Market, Town);
path(Town, Home);

is(Guard) = Guard;
is(Peter) = Peter;
is(Merchant) = Merchant;
is(Bandit) = Bandit;

// Actions
action walk(character character*, place from, place to){
	precondition: (
		location(character) = from & 
		path(from, to) &
		alive(character)
	);
	effect: (
		location(character) = to
	);
}

action buy(character character*, merchandise item, coin coin){
	precondition: (
		location(item) = Merchant &
		location(coin) = character &
		location(character) = Market &
		location(Merchant) = Market &
		criminal(character) = False
	);
	effect: (
		location(item) = character &
		location(coin) = Merchant
	);
}

action reportCriminal(character character*, character criminal, place place){
	precondition: (
		is(character) != Guard &
		criminal != character &
		knowsCriminal(character, criminal) &
		location(character) = place &
		location(Guard) = place
	);
	effect: (
		knowsCriminal(Guard, criminal)
	);
}

action steal(character character*, character victim, item item, weapon weapon, place place){
	precondition: (
		victim != character &
		item != weapon &
		alive(character) &
		alive(victim) &
		location(character) = place &
		location(victim) = place &
		location(item) = victim &
		wielding(character) = weapon &
		wielding(victim) = Null
	);
	effect: (
		location(item) = character &
		knowsCriminal(victim, character)
	);
}

action draw(character character*, weapon weapon){
	precondition: (
		location(weapon) = character &
		wielding(character) = Null &
		alive(character)
	);
	effect: (
		wielding(character) = weapon
	);
}

action sheathe(character character*, weapon weapon){
	precondition: (
		wielding(character) = weapon &
		alive(character)
	);
	effect: (
		wielding(character) = Null
	);
}

action attack(character attacker*, character target, weapon weapon, place place){
	precondition: (
		is(attacker) != Guard &		
		target != attacker &
		location(attacker) = place &
		location(target) = place &
		location(weapon) = attacker &
		wielding(attacker) = weapon &
		wielding(target) = Null &
		alive(attacker) &
		alive(target)
	);
	effect: (
		!alive(target)
	);
}

action apprehend(character attacker*, character target, weapon weapon, place place){
	precondition: (
		is(attacker) = Guard &
		knowsCriminal(attacker, target) &
		target != attacker &
		location(attacker) = place &
		location(target) = place &
		location(weapon) = attacker &
		wielding(attacker) = weapon &
		wielding(target) = Null &
		alive(attacker) &
		alive(target)
	);
	effect: (
		!alive(target)
	);
}

action takeFromContainer(character character*, item item, container container, place place){
	precondition: (
		location(character) = place & 
		location(container) = place &
		location(item) = container &
		alive(character)
	);
	effect: (
		location(item) = character
	);
}

action putInContainer(character character*, item item, container container, place place){
	precondition: (
		location(character) = place &
		location(container) = place &
		location(item) = character
	);
	effect: (
		location(item) = container
	);
}

//action trade(character a*, character b*, item itemA, item itemB, place place){
//	precondition: (
//		location(a) = place &
//		location(b) = place &
//		location(itemA) = a &
//		location(itemB) = b
//	);
//	effect: (
//		location(itemA) = b &
//		location(itemB) = a
//	);
//}

//axiom merchantWillTrade(character c, item cItem, item mItem){
//	precondition: (
//		location(c) = Market &
//		!criminal(c) &
//		location(cItem) = c &
//		location(mItem) = Merchant &
//		valuable(cItem) &
//		!intends(Merchant, location(mItem) = c)
//	);
//	effect: (
//		intends(Merchant, location(mItem) = c) &
//		intends(Merchant, location(cItem) = Merchant)
//	);	
//}

//axiom guardWants(character c){
//	precondition: (
//		criminal(c) & location(c) = Market & !intends(Guard, !alive(c))
//	);
//	effect: (
//		intends(Guard, !alive(c))
//	);
//}

//axiom banditWants(item i){
//		precondition: (
//			valuable(i) & !intends(Bandit, location(i) = Chest)			
//		);
//		effect: (
//			intends(Bandit, location(i) = Chest)
//		);
//}
